master_process on;

worker_processes auto;
worker_cpu_affinity auto;

error_log logs/error.log error;

events {
    accept_mutex off;
    worker_connections 10620;
}

worker_rlimit_nofile 20480;

worker_shutdown_timeout 3;

http {
    include mime.types;

    lua_package_path  "$prefix/deps/share/lua/5.1/?.lua;$prefix/?.lua;/usr/share/lua/5.1/?.lua;;";
    lua_package_cpath "$prefix/deps/lib64/lua/5.1/?.so;$prefix/deps/lib/lua/5.1/?.so;/usr/lib64/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;;";

    log_format main '$remote_addr\t$http_x_forwarded_for\t$time_iso8601\t$scheme://$http_host\t$request\t$request_length\t'
    '$http_referer\t$http_user_agent\t$connection_requests\t$upstream_cache_status\t$status\t'
    '$request_time\t$upstream_response_time\t$bytes_sent\t$body_bytes_sent\t$server_name\t'
    '$upstream_addr\t$upstream_status\t$request_id\t';

    access_log logs/access.log main;

    resolver 8.8.8.8 114.114.114.114 ipv6=off;

    client_max_body_size 0;

    real_ip_header X-Real-IP;
    set_real_ip_from 127.0.0.1;
    set_real_ip_from unix:;

    more_set_headers 'Server: APIOAK API Gateway';

    lua_code_cache on;

    lua_shared_dict plugin_limit_conn  50m;
    lua_shared_dict plugin_limit_req   50m;
    lua_shared_dict plugin_limit_count 50m;
    lua_shared_dict upstream_health_check 10m;
    lua_shared_dict upstream_worker_event 10m;
    lua_shared_dict prometheus_metrics 10m;

    upstream apioak_backend {
        server 0.0.0.1;
        balancer_by_lua_block {
            apioak.http_balancer()
        }
        keepalive 1024;
    }

    init_by_lua_block {
        apioak = require "apioak.apioak"
        apioak.init()
    }

    init_worker_by_lua_block {
        apioak.init_worker()
    }

    server {
        listen 10666;
        listen [::]:10666;

        location / {
            content_by_lua_block {
                local json = require "cjson"
                ngx.status = 200
                ngx.header["Content-Type"] = "application/json"

                local response = {}
                response["host"]   = ngx.var.host
                response["uri"]    = ngx.var.uri
                response["query"]  = ngx.req.get_uri_args()
                ngx.req.read_body()
                response["body"]   = ngx.req.get_post_args()
                response["header"] = ngx.req.get_headers()
                ngx.say(json.encode(response))
            }
        }
    }

    server {
        listen 10888;

        location / {
            content_by_lua_block {
                ngx.status = 200
                ngx.header["Content-Type"] = "text/html"
                ngx.say("Welcome to APIOAK")
            }
        }
    }

    server {
        listen 11080;
        listen 11443;

        location /apioak/admin {
            content_by_lua_block {
                apioak.http_admin()
            }
        }

        location /apioak/dashboard {
            index index.html;
            alias dashboard/;

            try_files $uri $uri/ /index.html;
        }
    }

    server {
        listen 10080;
        listen 10443;

        location / {
            add_header X-Request-Id $request_id;

            access_by_lua_block {
                apioak.http_access()
            }

            header_filter_by_lua_block {
                apioak.http_header_filter()
            }

            body_filter_by_lua_block {
                apioak.http_body_filter()
            }

            log_by_lua_block {
                apioak.http_log()
            }

            set $upstream_scheme             'http';
            set $upstream_host               $host;
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_uri                '';

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Request-Id      $request_id;
            proxy_pass_header  Server;
            proxy_pass_header  Date;
            proxy_pass         $upstream_scheme://apioak_backend$upstream_uri;
        }

        location /apioak/prometheus/metrics {
            content_by_lua 'prometheus:collect()';
        }
    }
}
