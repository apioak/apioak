master_process on;

worker_processes auto;

pid logs/apioak.pid;

error_log logs/error.log error;

events {
    accept_mutex off;
    worker_connections 1024;
}

worker_shutdown_timeout 3s;

http {
    include mime.types;

    lua_package_path  "$prefix/deps/share/lua/5.1/?.lua;$prefix/deps/share/lua/5.1/apioak/?.lua;$prefix/?.lua;/usr/share/lua/5.1/?.lua;/usr/local/lor/?.lua;;";
    lua_package_cpath "$prefix/deps/lib64/lua/5.1/?.so;$prefix/deps/lib/lua/5.1/?.so;/usr/lib64/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;;";

    log_format main '$remote_addr\t$http_x_forwarded_for\t$time_iso8601\t$scheme://$http_host\t$request\t$request_length\t'
    '$http_referer\t$http_user_agent\t$connection_requests\t$upstream_cache_status\t$status\t'
    '$request_time\t$upstream_response_time\t$bytes_sent\t$body_bytes_sent\t$server_name\t'
    '$upstream_addr\t$upstream_status\t$request_id\t';

    access_log logs/access.log main;

    resolver 8.8.8.8 114.114.114.114 ipv6=off;

    client_max_body_size 0;

    real_ip_header X-Real-IP;
    set_real_ip_from 127.0.0.1;
    set_real_ip_from unix:;

    more_set_headers 'Server: APIOAK API Gateway';

    lua_code_cache on;

    lua_shared_dict sys_routes       10m;
    lua_shared_dict sys_upstreams    10m;
    lua_shared_dict plug_limit_conn  10m;
    lua_shared_dict plug_limit_req   10m;
    lua_shared_dict plug_limit_count 10m;

    upstream apioak_backend {
        server 0.0.0.1;
        balancer_by_lua_block {
            apioak.http_balancer()
        }
        keepalive 1024;
    }

    init_by_lua_block {
        apioak = require "apioak.apioak"
        apioak.init()
    }

    init_worker_by_lua_block {
        apioak.init_worker()
    }

    server {
        listen 10111;
        listen 10222;

        location / {
            content_by_lua_block {
                local json = require "cjson"
                ngx.status = 200
                ngx.say("Host: "..ngx.var.host .. "  URI: " .. ngx.var.uri)
                ngx.say("[Query Params]", json.encode(ngx.req.get_uri_args()))
                ngx.req.read_body()
                ngx.say("[Post Params]", json.encode(ngx.req.get_post_args()))
                ngx.say("[Header Params]", json.encode(ngx.req.get_headers()))
            }
        }
    }

    server {
        listen 10080;
        listen 10443;

        location /apioak/admin {
            content_by_lua_block {
                apioak.http_admin()
            }
        }

        location / {
            add_header X-Request-Id $request_id;

            rewrite_by_lua_block {
                apioak.http_rewrite()
            }

            access_by_lua_block {
                apioak.http_access()
            }

            header_filter_by_lua_block {
                apioak.http_header_filter()
            }

            body_filter_by_lua_block {
                apioak.http_body_filter()
            }

            log_by_lua_block {
                apioak.http_log()
            }

            set $upstream_scheme             'http';
            set $upstream_host               $host;
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_uri                '';

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Request-Id      $request_id;
            proxy_pass_header  Server;
            proxy_pass_header  Date;
            proxy_pass         $upstream_scheme://apioak_backend$upstream_uri;
        }
    }
}
